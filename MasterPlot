import pandas as pd
import numpy as np
from scipy.spatial.distance import cdist
from sklearn.preprocessing import StandardScaler
from scipy.signal import detrend

def dtw_distance(s1, s2, window=10):
    """Compute Dynamic Time Warping distance between two series."""
    n, m = len(s1), len(s2)
    cost_matrix = np.zeros((n, m))
    cost_matrix[0, 0] = abs(s1[0] - s2[0])
    for i in range(1, n):
        cost_matrix[i, 0] = cost_matrix[i-1, 0] + abs(s1[i] - s2[0])
    for j in range(1, m):
        cost_matrix[0, j] = cost_matrix[0, j-1] + abs(s1[0] - s2[j])
    for i in range(1, n):
        for j in range(1, m):
            choices = cost_matrix[i-1, j], cost_matrix[i, j-1], cost_matrix[i-1, j-1]
            cost_matrix[i, j] = min(choices) + abs(s1[i] - s2[j])
    return cost_matrix[n-1, m-1] / (n + m)

def convergence_indicator(df, col1, col2, window=20, amplify_factor=2.0):
    """Generate a research-level convergence indicator."""
    # Detrend and standardize the series
    scaler = StandardScaler()
    series1 = detrend(df[col1].values)
    series2 = detrend(df[col2].values)
    series1 = scaler.fit_transform(series1.reshape(-1, 1)).flatten()
    series2 = scaler.fit_transform(series2.reshape(-1, 1)).flatten()

    # Compute rolling rate of change
    roc1 = pd.Series(series1).pct_change().rolling(window).mean()
    roc2 = pd.Series(series2).pct_change().rolling(window).mean()

    # Rolling correlation as coherence measure
    correlation = pd.Series(series1).rolling(window).corr(pd.Series(series2)).fillna(0)

    # DTW-based synchronization score
    dtw_scores = [dtw_distance(series1[i-window:i], series2[i-window:i]) if i >= window else np.nan 
                  for i in range(len(series1))]
    dtw_scores = pd.Series(dtw_scores).fillna(method='bfill').fillna(method='ffill')
    sync_score = 1 / (1 + dtw_scores)  # Inverse DTW as sync measure

    # Amplified indicator
    indicator = pd.Series(np.zeros(len(df)), index=df.index)
    for i in range(window, len(df)):
        if roc1[i] > 0 and roc2[i] > 0:  # Both upward
            coherence = correlation[i]
            amp = amplify_factor * coherence * sync_score[i]
            indicator[i] = amp * (roc1[i] + roc2[i]) / 2
        elif roc1[i] < 0 and roc2[i] < 0:  # Both downward
            coherence = correlation[i]
            amp = amplify_factor * coherence * sync_score[i]
            indicator[i] = amp * (roc1[i] + roc2[i]) / 2
        else:  # No sync or opposite movement
            indicator[i] = 0.0

    # Smooth the indicator
    indicator = indicator.rolling(window=5).mean().fillna(0)

    df['Convergence_Indicator'] = indicator
    return df

# Example usage (replace with your DataFrame and column names)
if __name__ == "__main__":
    # Sample data
    dates = pd.date_range(start="2025-01-01", periods=100, freq='D')
    df = pd.DataFrame({
        'Series_A': np.random.normal(0, 1, 100).cumsum(),
        'Series_B': np.random.normal(0, 1, 100).cumsum()
    }, index=dates)
    df = convergence_indicator(df, 'Series_A', 'Series_B')
    print(df[['Series_A', 'Series_B', 'Convergence_Indicator']].tail())




import matplotlib.pyplot as plt
df[['Series_A', 'Series_B', 'Convergence_Indicator']].plot(figsize=(10, 6))
plt.show()









# Function to calculate Z-score
def calculate_z_score(series, window=20):
    rolling_mean = series.rolling(window=window).mean()
    rolling_std = series.rolling(window=window).std()
    z_score = (series - rolling_mean) / rolling_std
    return z_score

# Calculate spreads and Z-scores for each pair with two different windows
results_20 = {}
results_50 = {}
for pair in pairs:
    spread = df[pair[1]] - df[pair[0]]  # Longer maturity - shorter maturity
    results_20[f"{pair[0]}_{pair[1]}_z20"] = calculate_z_score(spread, window=20).shift(1)
    results_50[f"{pair[0]}_{pair[1]}_z50"] = calculate_z_score(spread, window=50).shift(1)

# Create DataFrames for each set of Z-scores
df_spd_20 = pd.DataFrame(results_20, index=df.index)
df_spd_50 = pd.DataFrame(results_50, index=df.index)

# Concatenate both DataFrames with the original DataFrame
df = pd.concat([df, df_spd_20, df_spd_50], axis=1)


import matplotlib.pyplot as plt
import pandas as pd

def plot_z_scores(df, pairs, year=None, start_date=None, end_date=None, window1=20, window2=50):
    """
    Plot Z20 and Z50 scores for each pair on the same graph.
    
    Parameters:
    - df: DataFrame containing the Z-score columns
    - pairs: List of tuples containing pairs (e.g., [('2Y', '10Y'), ('5Y', '30Y')])
    - year: Integer year to filter data (optional)
    - start_date: String start date in 'YYYY-MM-DD' format (optional)
    - end_date: String end date in 'YYYY-MM-DD' format (optional)
    - window1: First rolling window size (default: 20)
    - window2: Second rolling window size (default: 50)
    """
    # Filter data based on year or date range
    if year:
        df_filtered = df[df.index.year == year]
    elif start_date and end_date:
        df_filtered = df.loc[start_date:end_date]
    else:
        df_filtered = df

    # Create plots for each pair
    for pair in pairs:
        col_z20 = f"{pair[0]}_{pair[1]}_z20"
        col_z50 = f"{pair[0]}_{pair[1]}_z50"
        
        if col_z20 in df_filtered.columns and col_z50 in df_filtered.columns:
            plt.figure(figsize=(12, 6))
            plt.plot(df_filtered.index, df_filtered[col_z20], label=f'Z-score ({window1}-period)', color='blue')
            plt.plot(df_filtered.index, df_filtered[col_z50], label=f'Z-score ({window2}-period)', color='red')
            plt.title(f'Z-scores for {pair[0]}-{pair[1]} Pair')
            plt.xlabel('Date')
            plt.ylabel('Z-score')
            plt.legend()
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()
        else:
            print(f"Z-score columns for pair {pair} not found in DataFrame")

def plot_z_score_spread(df, pairs, year=None, start_date=None, end_date=None, window1=20, window2=50):
    """
    Plot the spread between Z20 and Z50 scores for each pair.
    
    Parameters:
    - df: DataFrame containing the Z-score columns
    - pairs: List of tuples containing pairs (e.g., [('2Y', '10Y'), ('5Y', '30Y')])
    - year: Integer year to filter data (optional)
    - start_date: String start date in 'YYYY-MM-DD' format (optional)
    - end_date: String end date in 'YYYY-MM-DD' format (optional)
    - window1: First rolling window size (default: 20)
    - window2: Second rolling window size (default: 50)
    """
    # Filter data based on year or date range
    if year:
        df_filtered = df[df.index.year == year]
    elif start_date and end_date:
        df_filtered = df.loc[start_date:end_date]
    else:
        df_filtered = df

    # Create plots for each pair
    for pair in pairs:
        col_z20 = f"{pair[0]}_{pair[1]}_z20"
        col_z50 = f"{pair[0]}_{pair[1]}_z50"
        
        if col_z20 in df_filtered.columns and col_z50 in df_filtered.columns:
            # Calculate the spread between Z20 and Z50
            spread = df_filtered[col_z20] - df_filtered[col_z50]
            
            plt.figure(figsize=(12, 6))
            plt.plot(df_filtered.index, spread, label=f'Z{window1} - Z{window2} Spread', color='green')
            plt.title(f'Z-score Spread ({window1} vs {window2}) for {pair[0]}-{pair[1]} Pair')
            plt.xlabel('Date')
            plt.ylabel('Z-score Spread')
            plt.legend()
            plt.grid(True)
            plt.xticks(rotation=45)
            plt.tight_layout()
            plt.show()
        else:
            print(f"Z-score columns for pair {pair} not found in DataFrame")
