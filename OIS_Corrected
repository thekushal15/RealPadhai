import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
import matplotlib.pyplot as plt

# Load the actual data file from user upload
file_path = "/mnt/data/ZAR_OIS_Macro_Enhanced.csv"  # placeholder path
try:
    df = pd.read_csv(file_path)
except FileNotFoundError:
    df = None

# If data is loaded, begin preprocessing
if df is not None:
    df.columns = df.columns.str.strip()
    df['Dates'] = pd.to_datetime(df['Dates'])
    df = df.sort_values('Dates')
    df.dropna(inplace=True)

    # Define input and output columns based on user's image and description
    output_columns = ["1M", "2M", "3M", "4M", "5M", "6M", "7M", "8M", "9M", "1Y", "2Y", "3Y"]
    input_columns = [col for col in df.columns if col not in output_columns + ["Dates"]]

    # Normalize input features
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(df[input_columns])

    # Apply PCA to input features
    pca = PCA()
    X_pca = pca.fit_transform(X_scaled)

    # Calculate explained variance
    explained_var = np.cumsum(pca.explained_variance_ratio_) * 100
    num_components = np.argmax(explained_var >= 97) + 1

    # Plot Scree Plot
    plt.figure(figsize=(10, 6))
    plt.plot(explained_var, marker='o', linestyle='--', label='Cumulative Explained Variance')
    plt.axhline(97, color='r', linestyle=':', label='97% Threshold')
    plt.axvline(num_components - 1, color='g', linestyle=':', label=f'{num_components} Components')
    plt.title('Scree Plot: PCA Cumulative Explained Variance')
    plt.xlabel('Number of Components')
    plt.ylabel('Explained Variance (%)')
    plt.legend()
    plt.grid(True)
    plt.tight_layout()
    plt.show()

    num_components
else:
    "Data not loaded. Please upload the file named 'ZAR_OIS_Macro_Enhanced.csv'."

