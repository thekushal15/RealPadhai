def apply_trading_strategy(df, tenors, pairs, entry_signal=2.1, exit=0.75, patience=2.5, increment=0.1, 
                          wait_threshold1=1.5, use_max_cap=True, max_loss_cap=float('inf')):
    """
    Apply a trading strategy based on yield spread signals for bond pairs.
    
    Args:
        df (pandas.DataFrame): Input DataFrame with yield and position data.
        tenors (list): List of tenor labels.
        pairs (list): List of tuples representing trading pairs (short, long).
        entry_signal (float): Threshold for entering a trade.
        exit (float): Threshold for exiting a trade.
        patience (float): Tolerance level for benchmark z-score deviation.
        increment (float): Increment value for threshold adjustment.
        wait_threshold1 (float): Initial wait threshold in basis points.
        use_max_cap (bool): Flag to use maximum loss cap.
        max_loss_cap (float): Maximum allowable loss cap.
    """
    # Flatten and initialize DataFrame columns
    df = flatten_columns(df)
    df = initialize_columns(df, tenors, pairs)

    # Initialize tracking dictionaries and variables
    position_state = {f"{a}_{b}": False for a, b in pairs}
    entry_yield = {}
    pair_positions = {}
    benchmark = {f"{a}_{b}": {"mean": 0.0, "std": 0.0} for a, b in pairs}
    running_pnl_bps = {f"{a}_{b}": 0.0 for a, b in pairs}
    prev_z = {f"{a}_{b}": None for a, b in pairs}
    flat_bet = {f"{a}_{b}": 0 for a, b in pairs}
    steep_bet = {f"{a}_{b}": 0 for a, b in pairs}
    wait_threshold = {f"{a}_{b}": 0 for a, b in pairs}
    days_in_position = {f"{a}_{b}": 0 for a, b in pairs}
    FX_indicator = 0

    trade_execution_cost = 0
    bo_cost = 0
    daily_trades = 0
    daily_stop_losses = 0
    daily_profitable_trades = 0
    daily_loss_trades = 0
    cumulative_trades = 0
    cumulative_stop_losses = 0
    cumulative_profitable_trades = 0
    cumulative_loss_trades = 0
    cumulative_cost = 0.0
    cumulative_bps = 0.0
    realized_pnl_reporting = 0
    trade_done = 0
    signal = 0
    threshold = 1.8

    for i in range(len(df)):
        try:
            row = df.iloc[i]
            daily_pnl_bps = 0.0
            new_trades = 0
            new_stop_losses = 0
            new_profitable_trades = 0
            new_loss_trades = 0
            daily_risk_flat = 0.0
            daily_risk_steep = 0.0

            for pair in pairs:
                short, long = pair
                pair_key = f"{short}_{long}"
                z_col = f"({short}_Yld, {long}_Yld)"
                mean_col = f"({short}_Yld, {long}_Yld)_mean"
                std_col = f"({short}_Yld, {long}_Yld)_std"

                z = row[z_col]
                if pd.isna(z):
                    continue

                if i > 0 and prev_z[pair_key] is not None:
                    z_change = abs(z - prev_z[pair_key])
                    if z_change > 10:
                        prev_z[pair_key] = z
                        continue

                if position_state[pair_key]:
                    days_in_position[pair_key] += 1
                    current_yield = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                    current_spread = current_yield[1] - current_yield[0]
                    benchmark_z = (current_spread - benchmark[pair_key]["mean"]) / benchmark[pair_key]["std"]
                    if abs(benchmark_z) > patience:
                        benchmark[pair_key]["mean"] = current_spread
                    daily_pnl_bps += (entry_spread[pair_key] - current_spread) * 100 if position_state[pair_key] == 1 else (current_spread - entry_spread[pair_key]) * 100
                    running_pnl_bps[pair_key] += daily_pnl_bps
                    if running_pnl_bps[pair_key] <= -max_loss_cap or abs(signal) >= abs(wait_threshold[pair_key]):
                        realized_pnl = running_pnl_bps[pair_key] if running_pnl_bps[pair_key] > -max_loss_cap else -max_loss_cap
                        trade_execution_cost += 1
                        bo_cost += 1
                        position_state[pair_key] = False
                        benchmark[pair_key] = {"mean": 0.0, "std": 0.0}
                        df.loc[i, f"Pos_{short}"] += 1 if position_state[pair_key] == -1 else -1
                        df.loc[i, f"Pos_{long}"] += -1 if position_state[pair_key] == -1 else 1
                        realized_pnl_reporting += realized_pnl
                        wait_threshold[pair_key] = wait_threshold1
                        if realized_pnl > 0:
                            new_profitable_trades += 1
                        else:
                            new_loss_trades += 1
                            if running_pnl_bps[pair_key] <= -max_loss_cap:
                                new_stop_losses += 1
                        if position_state[pair_key] == 1:
                            flat_bet[pair_key] -= 1
                        else:
                            steep_bet[pair_key] -= 1
                else:
                    threshold += increment
                    if z >= entry_signal:
                        trade_execution_cost += 1
                        bo_cost += 1
                        position_state[pair_key] = True
                        benchmark[pair_key] = {"mean": row[mean_col], "std": row[std_col]}
                        df.loc[i, f"Pos_{short}"] -= 1
                        df.loc[i, f"Pos_{long}"] += 1
                        entry_yield[pair_key] = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                        entry_spread[pair_key] = entry_yield[pair_key][1] - entry_yield[pair_key][0]
                        running_pnl_bps[pair_key] = 0.0
                        wait_threshold[pair_key] = wait_threshold1
                        cumulative_trades += 1
                        new_trades += 1
                        flat_bet[pair_key] += 1
                        df.loc[i, "flat_bet"] = flat_bet[pair_key]
                        position_state[pair_key] = 1
                    elif z <= -entry_signal:
                        trade_execution_cost += 1
                        bo_cost += 1
                        position_state[pair_key] = True
                        benchmark[pair_key] = {"mean": row[mean_col], "std": row[std_col]}
                        df.loc[i, f"Pos_{short}"] += 1
                        df.loc[i, f"Pos_{long}"] -= 1
                        entry_yield[pair_key] = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                        entry_spread[pair_key] = entry_yield[pair_key][1] - entry_yield[pair_key][0]
                        running_pnl_bps[pair_key] = 0.0
                        wait_threshold[pair_key] = wait_threshold1
                        cumulative_trades += 1
                        new_trades += 1
                        steep_bet[pair_key] += 1
                        df.loc[i, "steep_bet"] = steep_bet[pair_key]
                        position_state[pair_key] = -1

                prev_z[pair_key] = z
                df.loc[i, f"Pnl_bps_{pair_key}"] = running_pnl_bps[pair_key]

            # Daily calculations
            df.loc[i, "daily_running_pnl"] = sum(running_pnl_bps.values())
            df.loc[i, "daily_flat_positions"] = sum(1 for v in position_state.values() if v == 1)
            df.loc[i, "daily_steep_positions"] = sum(1 for v in position_state.values() if v == -1)
            df.loc[i, "daily_total_positions"] = df.loc[i, "daily_flat_positions"] + df.loc[i, "daily_steep_positions"]
            df.loc[i, "daily_trades"] = new_trades
            df.loc[i, "daily_profitable_trades"] = new_profitable_trades
            df.loc[i, "daily_loss_trades"] = new_loss_trades
            df.loc[i, "daily_stop_losses"] = new_stop_losses
            df.loc[i, "daily_execution_cost"] = trade_execution_cost
            df.loc[i, "daily_bo_cost"] = bo_cost
            df.loc[i, "daily_total_cost"] = df.loc[i, "daily_execution_cost"] + df.loc[i, "daily_bo_cost"]
            df.loc[i, "daily_return"] = realized_pnl_reporting
            df.loc[i, "daily_net_return_execution"] = df.loc[i, "daily_return"] - df.loc[i, "daily_execution_cost"]
            df.loc[i, "daily_net_return_bo"] = df.loc[i, "daily_net_return_execution"] - df.loc[i, "daily_bo_cost"]

            # Cumulative calculations
            df.loc[i, "cumulative_trades"] = cumulative_trades
            df.loc[i, "cumulative_stop_losses"] = cumulative_stop_losses
            df.loc[i, "cumulative_profitable_trades"] = cumulative_profitable_trades
            df.loc[i, "cumulative_loss_trades"] = cumulative_loss_trades
            df.loc[i, "cumulative_cost"] = cumulative_cost
            df.loc[i, "cumulative_bps"] = cumulative_bps

            daily_trades += new_trades
            daily_stop_losses += new_stop_losses
            daily_profitable_trades += new_profitable_trades
            daily_loss_trades += new_loss_trades
            cumulative_stop_losses += new_stop_losses
            cumulative_profitable_trades += new_profitable_trades
            cumulative_loss_trades += new_loss_trades
            cumulative_cost += trade_execution_cost + bo_cost
            cumulative_bps += daily_pnl_bps

        except Exception as e:
            print(f"Skipped index {i} due to error: {e}")
            continue

    # Final summary
    print("Strategy entry :", entry_signal)
    print("Strategy exit :", exit)
    print("Total Bps Gained:", cumulative_bps)
    print("Total Trading Cost (bps):", cumulative_cost)
    print("Total Trades:", cumulative_trades)
    print("Total Profitable Trades:", cumulative_profitable_trades)
    print("Total Loss Making Trades:", cumulative_loss_trades)
    print("Total Stop Losses Triggered:", cumulative_stop_losses)
    output_cols = ["Idx"] + [f"Pos_{tenor}" for tenor in tenors] + [f"Pnl_bps_{a}_{b}" for a, b in pairs] + ["Total_bps", "cumulative_bps",
                  "Total_Trades", "cumm_Trades", "Total_Stop_Loss", "cumm_Stop_Loss",
                  "Total_Profitable_Trades", "cumm_Profitable_Trades",
                  "Total_Loss_Trades", "cumm_Loss_Trades", "Trading_cost"]
    return df[output_cols]
