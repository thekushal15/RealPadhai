import pandas as pd
import itertools
import numpy as np

# Set tenors and pairs
tenors = ['26', '30', '31', '32', '35', '40']
pairs = list(itertools.combinations(tenors, 2))

def flatten_columns(df):
    df.columns = [
        f"{col[0]}_{col[1]}" if isinstance(col, tuple) else col
        for col in df.columns
    ]
    return df

def initialize_columns(df, tenors, pairs):
    df['Idx'] = range(len(df))  # Add an integer index column
    for tenor in tenors:
        df[f'Pos_{tenor}'] = 0.0
    for pair in pairs:
        df[f'PnL_bps_{pair[0]}_{pair[1]}'] = 0.0
    df['Total_bps'] = 0.0
    df['Cumulative_bps'] = 0.0
    return df

def apply_trading_strategy(df, tenors, pairs, stop_loss_trigger=-100, daily_stop_loss=-1000):
    df = flatten_columns(df)
    df = initialize_columns(df, tenors, pairs)

    position_state = {f"{a}_{b}": False for a, b in pairs}
    entry_yield = {}
    pair_positions = {}
    running_pnl_bps = {f"{a}_{b}": 0.0 for a, b in pairs}
    prev_z = {f"{a}_{b}": None for a, b in pairs}

    for i in range(len(df)):
        try:
            row = df.iloc[i]
            daily_pnl_bps = 0.0

            for pair in pairs:
                short, long = pair
                pair_key = f"{short}_{long}"
                z_col = f"{short}_Yld_{long}_Yld"

                z = row[z_col]
                if pd.isna(z):
                    continue

                if i > change = abs(z - prev_z[pair_key])
                    if z_change > 3:
                        prev_z[pair_key] = z
                        continue

                if not position_state[pair_key]:
                    if z >= 3:
                        # Long spread: short the short tenor, long the long tenor
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = -notional * scale
                        pos_long = notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        entry_yield[pair_key] = (row[f'{short}_Yld'], row[f'{long}_Yld'])
                        pair_positions[pair_key] = (pos_short, pos_long, scale)
                        position_state[pair_key] = True
                        running_pnl_bps[pair_key] = 0.0

                    elif z <= -3:
                        # Short spread: long the short tenor, short the long tenor
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = notional * scale
                        pos_long = -notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        entry_yield[pair_key] = (row[f'{short}_Yld'], row[f'{long}_Yld'])
                        pair_positions[pair_key] = (pos_short, pos_long, scale)
                        position_state[pair_key] = True
                        running_pnl_bps[pair_key] = 0.0

                else:
                    # Calculate current spread and PnL in bps
                    current_yield = (row[f'{short}_Yld'], row[f'{long}_Yld'])
                    entry_spread = entry_yield[pair_key][0] - entry_yield[pair_key][1]
                    current_spread = current_yield[0] - current_yield[1]
                    spread_change_bps = (entry_spread - current_spread) * 100  # Convert to bps
                    pos_short, pos_long, scale = pair_positions[pair_key]
                    # PnL in bps is proportional to notional and spread change
                    if pos_long > 0:  # Long spread position
                        pnl_bps = spread_change_bps * abs(pos_long) / 1_000_000
                    else:  # Short spread position
                        pnl_bps = -spread_change_bps * abs(pos_long) / 1_000_000
                    running_pnl_bps[pair_key] = pnl_bps

                    if abs(z) <= 1.5 or running_pnl_bps[pair_key] <= stop_loss_trigger:
                        # Exit position and realize PnL
                        df.loc[i, f'PnL_bps_{pair_key}'] = running_pnl_bps[pair_key]
                        df.loc[i, f'Pos_{short}'] -= pos_short
                        df.loc[i, f'Pos_{long}'] -= pos_long
                        position_state[pair_key] = False
                        running_pnl_bps[pair_key] = 0.0
                        pair_positions.pop(pair_key, None)
                        entry_yield.pop(pair_key, None)

                df.loc[i, f'PnL_bps_{pair_key}'] = running_pnl_bps[pair_key]
                daily_pnl_bps += running_pnl_bps[pair_key]
                prev_z[pair_key] = z

            if daily_pnl_bps <= daily_stop_loss:
                # Exit all positions if daily stop loss is hit
                for pair in pairs:
                    pair_key = f"{pair[0]}_{pair[1]}"
                    if position_state[pair_key]:
                        short, long = pair
                        pos_short, pos_long, _ = pair_positions[pair_key]
                        df.loc[i, f'Pos_{short}'] -= pos_short
                        df.loc[i, f'Pos_{long}'] -= pos_long
                        position_state[pair_key] = False
                        running_pnl_bps[pair_key] = 0.0
                        pair_positions.pop(pair_key, None)
                        entry_yield.pop(pair_key, None)

            df.loc[i, 'Total_bps'] = daily_pnl_bps
            df.loc[i, 'Cumulative_bps'] = daily_pnl_bps if i == 0 else df.loc[i - 1, 'Cumulative_bps'] + daily_pnl_bps

        except Exception as e:
            print(f"Skipped index {i} due to error: {e}")
            continue

    output_cols = ['Idx'] + [f'Pos_{t}' for t in tenors] + [f'PnL_bps_{a}_{b}' for a, b in pairs] + ['Total_bps', 'Cumulative_bps']
    return df[output_cols]














# Faltuuu

import pandas as pd
import itertools

# Tenors and spread pairs
tenors = ['26', '30', '31', '32', '35', '40']
pairs = list(itertools.combinations(tenors, 2))

# Flatten column names if needed
def flatten_columns(df):
    df.columns = [f"{col[0]}_{col[1]}" if isinstance(col, tuple) else col for col in df.columns]
    return df

# Initialize required columns
def initialize_columns(df, tenors, pairs):
    df['Idx'] = range(len(df))
    for tenor in tenors:
        df[f'Pos_{tenor}'] = 0.0
    df['Borrowed'] = 0.0
    for pair in pairs:
        df[f'PnL_bps_{pair[0]}_{pair[1]}'] = 0.0
    df['Total_bps'] = 0.0
    df['Cumulative_bps'] = 0.0
    return df

# Main strategy logic with bps-based PnL
def apply_bps_strategy(df, tenors, pairs, bps_stop_loss=20):
    df = flatten_columns(df)
    df = initialize_columns(df, tenors, pairs)

    position_state = {f"{a}_{b}": False for a, b in pairs}
    entry_price = {}
    pair_positions = {}
    entry_spread = {}
    prev_z = {f"{a}_{b}": None for a, b in pairs}

    for i in range(len(df)):
        try:
            row = df.iloc[i]
            daily_bps_pnl = 0.0

            for pair in pairs:
                short, long = pair
                pair_key = f"{short}_{long}"
                z_col = f"{short}_Yld_{long}_Yld"
                z = row.get(z_col, None)
                if pd.isna(z):
                    continue

                if i > 0 and prev_z[pair_key] is not None:
                    if abs(z - prev_z[pair_key]) > 5:
                        prev_z[pair_key] = z
                        continue

                if not position_state[pair_key]:
                    if z >= 3:
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = -notional * scale
                        pos_long = notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        df.loc[i, 'Borrowed'] += 1_000_000
                        entry_price[pair_key] = (row[f'{short}_PX'], row[f'{long}_PX'])
                        pair_positions[pair_key] = (pos_short, pos_long)
                        entry_spread[pair_key] = row[f'{long}_Yld'] - row[f'{short}_Yld']
                        position_state[pair_key] = True

                    elif z <= -3:
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = notional * scale
                        pos_long = -notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        df.loc[i, 'Borrowed'] += 1_000_000
                        entry_price[pair_key] = (row[f'{short}_PX'], row[f'{long}_PX'])
                        pair_positions[pair_key] = (pos_short, pos_long)
                        entry_spread[pair_key] = row[f'{long}_Yld'] - row[f'{short}_Yld']
                        position_state[pair_key] = True

                else:
                    current_price = (row[f'{short}_PX'], row[f'{long}_PX'])
                    pos_short, pos_long = pair_positions[pair_key]
                    entry_short_px, entry_long_px = entry_price[pair_key]

                    short_pnl = (current_price[0] - entry_short_px) / entry_short_px * 10_000 * (pos_short / abs(pos_short))
                    long_pnl = (current_price[1] - entry_long_px) / entry_long_px * 10_000 * (pos_long / abs(pos_long))
                    pnl_bps = short_pnl + long_pnl
                    df.loc[i, f'PnL_bps_{pair_key}'] = pnl_bps

                    if abs(z) <= 1.5 or abs(pnl_bps) >= bps_stop_loss:
                        df.loc[i, f'Pos_{short}'] -= pos_short
                        df.loc[i, f'Pos_{long}'] -= pos_long
                        position_state[pair_key] = False
                        pair_positions.pop(pair_key, None)
                        entry_price.pop(pair_key, None)
                        entry_spread.pop(pair_key, None)

                    daily_bps_pnl += pnl_bps

                prev_z[pair_key] = z

            df.loc[i, 'Total_bps'] = daily_bps_pnl
            df.loc[i, 'Cumulative_bps'] = df.loc[i - 1, 'Cumulative_bps'] + daily_bps_pnl if i > 0 else daily_bps_pnl

        except Exception as e:
            print(f"Error at index {i}: {e}")
            continue

    output_cols = ['Idx'] + [f'Pos_{t}' for t in tenors] + [f'PnL_bps_{a}_{b}' for a, b in pairs] + ['Borrowed', 'Total_bps', 'Cumulative_bps']
    return df[output_cols]














import pandas as pd
import itertools

# Tenors and spread pairs
tenors = ['26', '30', '31', '32', '35', '40']
pairs = list(itertools.combinations(tenors, 2))

# Flatten column names if needed
def flatten_columns(df):
    df.columns = [f"{col[0]}_{col[1]}" if isinstance(col, tuple) else col for col in df.columns]
    return df

# Initialize required columns
def initialize_columns(df, tenors, pairs):
    df['Idx'] = range(len(df))
    for tenor in tenors:
        df[f'Pos_{tenor}'] = 0.0
    df['Borrowed'] = 0.0
    for pair in pairs:
        df[f'PnL_bps_{pair[0]}_{pair[1]}'] = 0.0
    df['Total_bps'] = 0.0
    df['Cumulative_bps'] = 0.0
    return df

# Main strategy logic with bps-based PnL
def apply_bps_strategy(df, tenors, pairs, bps_stop_loss=20):
    df = flatten_columns(df)
    df = initialize_columns(df, tenors, pairs)

    position_state = {f"{a}_{b}": False for a, b in pairs}
    entry_price = {}
    pair_positions = {}
    entry_spread = {}
    prev_z = {f"{a}_{b}": None for a, b in pairs}

    for i in range(len(df)):
        try:
            row = df.iloc[i]
            daily_bps_pnl = 0.0

            for pair in pairs:
                short, long = pair
                pair_key = f"{short}_{long}"
                z_col = f"{short}_Yld_{long}_Yld"
                z = row.get(z_col, None)
                if pd.isna(z):
                    continue

                if i > 0 and prev_z[pair_key] is not None:
                    if abs(z - prev_z[pair_key]) > 5:
                        prev_z[pair_key] = z
                        continue

                if not position_state[pair_key]:
                    if z >= 3:
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = -notional * scale
                        pos_long = notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        df.loc[i, 'Borrowed'] += 1_000_000
                        entry_price[pair_key] = (row[f'{short}_PX'], row[f'{long}_PX'])
                        pair_positions[pair_key] = (pos_short, pos_long)
                        entry_spread[pair_key] = row[f'{long}_Yld'] - row[f'{short}_Yld']
                        position_state[pair_key] = True

                    elif z <= -3:
                        scale = row[f'{long}_DV01'] / row[f'{short}_DV01']
                        notional = 1_000_000 / (row[f'{long}_DV01'] + scale * row[f'{short}_DV01'])
                        pos_short = notional * scale
                        pos_long = -notional
                        df.loc[i, f'Pos_{short}'] += pos_short
                        df.loc[i, f'Pos_{long}'] += pos_long
                        df.loc[i, 'Borrowed'] += 1_000_000
                        entry_price[pair_key] = (row[f'{short}_PX'], row[f'{long}_PX'])
                        pair_positions[pair_key] = (pos_short, pos_long)
                        entry_spread[pair_key] = row[f'{long}_Yld'] - row[f'{short}_Yld']
                        position_state[pair_key] = True

                else:
                    current_price = (row[f'{short}_PX'], row[f'{long}_PX'])
                    pos_short, pos_long = pair_positions[pair_key]
                    entry_short_px, entry_long_px = entry_price[pair_key]

                    short_pnl = (current_price[0] - entry_short_px) / entry_short_px * 10_000 * (pos_short / abs(pos_short))
                    long_pnl = (current_price[1] - entry_long_px) / entry_long_px * 10_000 * (pos_long / abs(pos_long))
                    pnl_bps = short_pnl + long_pnl
                    df.loc[i, f'PnL_bps_{pair_key}'] = pnl_bps

                    if abs(z) <= 1.5 or abs(pnl_bps) >= bps_stop_loss:
                        df.loc[i, f'Pos_{short}'] -= pos_short
                        df.loc[i, f'Pos_{long}'] -= pos_long
                        position_state[pair_key] = False
                        pair_positions.pop(pair_key, None)
                        entry_price.pop(pair_key, None)
                        entry_spread.pop(pair_key, None)

                    daily_bps_pnl += pnl_bps

                prev_z[pair_key] = z

            df.loc[i, 'Total_bps'] = daily_bps_pnl
            df.loc[i, 'Cumulative_bps'] = df.loc[i - 1, 'Cumulative_bps'] + daily_bps_pnl if i > 0 else daily_bps_pnl

        except Exception as e:
            print(f"Error at index {i}: {e}")
            continue

    output_cols = ['Idx'] + [f'Pos_{t}' for t in tenors] + [f'PnL_bps_{a}_{b}' for a, b in pairs] + ['Borrowed', 'Total_bps', 'Cumulative_bps']
    return df[output_cols]
