def apply_trading_strategy(df, tenors, pairs, entry=2.1, exit=0.75, use_max_cap=True, max_loss_cap=100000.0):
    df = flatten_columns(df)
    df = initialize_columns(df, tenors, pairs)

    position_state = {f"{a}_{b}": False for a, b in pairs}
    entry_yield = {}
    entry_spread = {}
    pair_positions = {}
    benchmark = {f"{a}_{b}": {'mean': 0.0, 'std': 0.0} for a, b in pairs}
    running_pnl_bps = {f"{a}_{b}": 0.0 for a, b in pairs}
    prev_z = {f"{a}_{b}": None for a, b in pairs}
    daily_trades = 0
    daily_stop_losses = 0
    daily_profitable_trades = 0
    daily_loss_trades = 0
    cumulative_trades = 0
    cumulative_stop_losses = 0
    cumulative_profitable_trades = 0
    cumulative_loss_trades = 0
    cumulative_bps = 0.0
    realized_pnl_reporting = 0
    trade_done = 0

    for i in range(len(df)):
        try:
            row = df.iloc[i]
            daily_pnl_bps = 0.0
            new_trades = 0
            new_stop_losses = 0
            new_profitable_trades = 0
            new_loss_trades = 0
            daily_risk_flat = 0.0
            daily_risk_steep = 0.0

            for pair in pairs:
                short, long = pair
                pair_key = f"{short}_{long}"
                z_col = f"{pair}_mean"
                mean_col = f"{pair}_mean"
                std_col = f"{pair}_std"
                z = row[z_col]
                if pd.isna(z):
                    continue

                if i > 0 and prev_z[pair_key] is not None:
                    z_change = abs(z - prev_z[pair_key])
                    if z_change > 10:
                        prev_z[pair_key] = z
                        continue

                if not position_state[pair_key]:
                    if z >= 2.17:
                        benchmark[pair_key] = {'mean': df.loc[i, mean_col], 'std': df.loc[i, std_col]}
                        scale = row[f"{long}_DV01"] / row[f"{short}_DV01"]
                        notional = 1_000_000 / (row[f"{long}_DV01"] + scale * row[f"{short}_DV01"])
                        pos_short = -scale
                        pos_long = 1
                        df.loc[i, f"Pos_{short}"] += pos_short
                        df.loc[i, f"Pos_{long}"] += pos_long
                        entry_yield[pair_key] = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                        entry_spread[pair_key] = entry_yield[pair_key][1] - entry_yield[pair_key][0]
                        position_state[pair_key] = True
                        pair_positions[pair_key] = (pos_short, pos_long, scale)
                        running_pnl_bps[pair_key] = 0.0
                        new_trades += 1
                        trading_cost += 1.0
                    elif z <= -1.77:
                        benchmark[pair_key] = {'mean': df.loc[i, mean_col], 'std': df.loc[i, std_col]}
                        scale = row[f"{long}_DV01"] / row[f"{short}_DV01"]
                        notional = 1_000_000 / (row[f"{long}_DV01"] + scale * row[f"{short}_DV01"])
                        pos_short = scale
                        pos_long = -1
                        df.loc[i, f"Pos_{short}"] += pos_short
                        df.loc[i, f"Pos_{long}"] += pos_long
                        entry_yield[pair_key] = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                        entry_spread[pair_key] = entry_yield[pair_key][1] - entry_yield[pair_key][0]
                        position_state[pair_key] = True
                        pair_positions[pair_key] = (pos_short, pos_long, scale)
                        running_pnl_bps[pair_key] = 0.0
                        new_trades += 1
                        trading_cost += 1.0
                else:
                    current_yield = (row[f"{short}_Yld"], row[f"{long}_Yld"])
                    current_spread = current_yield[1] - current_yield[0]
                    spread_change_bps = (entry_spread[pair_key] - current_spread) * 100
                    pos_short, pos_long, scale = pair_positions[pair_key]
                    if position_state[pair_key]:
                        benchmark_z = (current_spread - benchmark[pair_key]['mean']) / benchmark[pair_key]['std']
                        if benchmark_z <= 0.75:
                            pnl_bps = spread_change_bps
                            scaled_bps_pnl = (((current_yield[0] - entry_yield[pair_key][0]) * pos_short) + ((current_yield[0] - entry_yield[pair_key][0]) * pos_short)) * 100
                            # print(scaled_bps_pnl)
                            running_pnl_bps[pair_key] += pnl_bps
                            bm = benchmark[pair_key]
                            benchmark_z = (current_spread - bm['mean']) / bm['std']
                            print(benchmark_z)
                            pos_short = 0
                            pos_long = 0
                            scale = pair_positions.pop(pair_key, None)
                            entry_yield.pop(pair_key, None)
                            entry_spread.pop(pair_key, None)
                            position_state[pair_key] = False
                            daily_pnl_bps += realized_pnl_reporting
                            realized_pnl_reporting = 0
                            trade_done = 0
                            prev_z[pair_key] = z

                            if trade_done == 1:
                                daily_pnl_bps += realized_pnl_reporting
                                realized_pnl_reporting = 0
                                trade_done = 0
                                prev_z[pair_key] = z

                        stop_loss_threshold = -1.2  # Stop Loss in bps
                        max_loss_cap_adjusted = max_loss_cap if use_max_cap else float('-inf')

                        if abs(z) <= 1.45 or running_pnl_bps[pair_key] <= max(max_loss_cap_adjusted, stop_loss_threshold):
                            df.loc[i, f"Pnl_bps_{pair_key}"] = realized_pnl
                            df.loc[i, f"Pos_{short}"] -= pos_short
                            df.loc[i, f"Pos_{long}"] -= pos_long
                            position_state[pair_key] = False
                            if running_pnl_bps[pair_key] < stop_loss_threshold:
                                new_stop_losses += 1
                            if realized_pnl > 0:
                                new_profitable_trades += 1
                            elif realized_pnl < 0:
                                new_loss_trades += 1
                                trade_done = 1
                                trading_cost += 1.0
                                realized_pnl_reporting = running_pnl_bps[pair_key]
                            if running_pnl_bps[pair_key] <= stop_loss_threshold:
                                # print(running_pnl_reporting)
                                running_pnl_bps[pair_key] = 0
                                pair_positions.pop(pair_key, None)
                                entry_yield.pop(pair_key, None)
                                entry_spread.pop(pair_key, None)

                        if pair_key in pair_positions:
                            pos_short, pos_long, scale = pair_positions[pair_key]
                            if pos_short < 0:
                                daily_risk_flat += abs(pos_short)
                            if pos_long < 0:
                                daily_risk_steep += abs(pos_long)

                        df.loc[i, 'Risk_Flattener'] = daily_risk_flat
                        df.loc[i, 'Risk_Steepener'] = daily_risk_steep
                        df.loc[i, 'Total_Risk'] = daily_risk_flat + daily_risk_steep
                        df.loc[i, 'Trading_Cost'] = trading_cost

                        daily_trades += new_trades
                        daily_stop_losses += new_stop_losses
                        daily_profitable_trades += new_profitable_trades
                        daily_loss_trades += new_loss_trades
                        cumulative_trades += new_trades
                        cumulative_stop_losses += new_stop_losses
                        cumulative_profitable_trades += new_profitable_trades
                        cumulative_loss_trades += new_loss_trades
                        cumulative_bps += daily_pnl_bps

                        df.loc[i, 'Total_bps'] = daily_pnl_bps if i == 0 else df.loc[i - 1, 'Cumulative_bps'] + daily_pnl_bps
                        df.loc[i, 'Total_Trades'] = daily_trades
                        df.loc[i, 'Cumm_Trades'] = cumulative_trades
                        df.loc[i, 'Total_Stop_Loss'] = daily_stop_losses
                        df.loc[i, 'Cumm_Stop_Loss'] = cumulative_stop_losses
                        df.loc[i, 'Total_Profitable_Trades'] = daily_profitable_trades
                        df.loc[i, 'Cumm_Profitable_Trades'] = cumulative_profitable_trades
                        df.loc[i, 'Total_Loss_Trades'] = daily_loss_trades
                        df.loc[i, 'Cumm_Loss_Trades'] = cumulative_loss_trades

                prev_z[pair_key] = z

        except Exception as e:
            print(f"Skipped index {i} due to error: {e}")
            continue

        print("\n--- Final Summary ---")
        print(f"Strategy entry : {entry}")
        print(f"Strategy exit : {exit}")
        print(f"Total Bps Gained: {cumulative_bps}")
        print(f"Total Trading Cost (bps): {trading_cost}")
        print(f"Total Trades: {cumulative_trades}")
        print(f"Total Profitable Trades: {cumulative_profitable_trades}")
        print(f"Total Loss Making Trades: {cumulative_loss_trades}")
        print(f"Total Stop Losses Triggered: {cumulative_stop_losses}")

    output_cols = ['Idx'] + [f"Pos_{t}" for t in tenors] + [f"Pnl_bps_{a}_{b}" for a, b in pairs] + ['Total_bps', 'Cumulative_bps',
                                                                 'Total_Trades', 'Cumm_Trades',
                                                                 'Total_Stop_Loss', 'Cumm_Stop_Loss',
                                                                 'Total_Profitable_Trades', 'Cumm_Profitable_Trades',
                                                                 'Total_Loss_Trades', 'Cumm_Loss_Trades']
    return df[output_cols]
